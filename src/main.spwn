extract $

let commands = import "commands.spwn"
let cli_parser = import "cli_parser.spwn"

let path = "~"
let indicator = ">"
let running = true

array_get = (array: @array, index: @number, default = null) => array[index] if array.length > index else default

output_convert = (output){
	signal = switch output {
		@string: output,
		@array: array_get(array, 0)
		else: null,
	}
	content = switch output {
		@array: array_get(array, 0),
		else: null,
	}
	return [ signal, content ]
}

while running {
    let input = get_input("[ {} ] {} ".fmt([path,indicator]))
    
    let [
        valid,
        cmd,
        args,
        content,
		send,
    ] = cli_parser(input)

    if !valid {continue}

	if !(commands has cmd) {
		print("Command not found: {}".fmt(cmd))
		continue
	}

	file_print = (dump=""){
		to_dump = switch dump {
			@string: dump,
			else: display(dump),
		} + '\n'

		for file in send {
			old_file_content = $.readfile(file)
			$.writefile(file, old_file_content + to_dump)
		}
	}

	let context = {
		cmd,
		args,
        content,
		path,
		commands,
	}

	if send.length > 0 {
		context.set("print",file_print)
	}

	macro = commands.get_macro(cmd)

	parameters = (macro as @string).split("(")[1].split(")")[0].split(",").map(p=>p.split(':')[0]).filter(p=>p.length>0)

	output = switch parameters.length {
		case 0: (()=>macro())(),
		case 1: (()=>macro(context))(),
	}

	[ signal, data ] = output_convert(output)

	switch signal {
		case 'quit': (){
			running = false
		}(),
		case 'update_path': (){
			path = data
		}(),
	}
}
