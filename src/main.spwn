extract $

let commands = import "commands.spwn"

let path = "~"
let indicator = ">"
let running = true

output_convert = (output){
	signal = switch output {
		@string: output,
		@array: array[0] if array.length > 0 else null,
		else: null,
	}
	content = switch output {
		@array: array[1] if array.length > 1 else null,
		else: null,
	}
	return [ signal, content ]
}

while running {
    let input = get_input("[ {} ] {} ".fmt([path,indicator]))

    let args = input.replace(r"[\s\r\n\t]+"," ").trim().split(" ").filter(v => !v.is_empty())
    if args.length == 0 {continue}
    let cmd = args.shift().lowercase()

	if !(commands has cmd) {
		print("Command not found: {}".fmt(cmd))
		continue
	}

	context = {
		cmd,
		args,
		path,
		commands,
	}

	macro = commands.get_macro(cmd)

	parameters = (macro as @string).split("(")[1].split(")")[0].split(",").map(p=>p.split(':')[0]).filter(p=>p.length>0)

	output = switch parameters.length {
		case 0: (()=>macro())(),
		case 1: (()=>macro(context))(),
	}

	[ signal, data ] = output_convert(output)

	switch signal {
		case 'quit': (){
			running = false
		}(),
		case 'update_path': (){
			path = data
		}(),
	}
}
